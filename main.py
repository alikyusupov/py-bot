import telebot
from telebot import types
import json
import asyncio
from playwright.async_api import async_playwright
import json

GENERAL_DATA = {}

bot = telebot.TeleBot('6977710887:AAGfoal03KVByfACrLxM6dcjgX6dd48OWs0')

SBR_WS_CDP = 'wss://brd-customer-hl_7b3b4e62-zone-scraping_browser1-country-ru:wgdghplqrzf8@brd.superproxy.io:9222'

async def run(pw):
    global GENERAL_DATA
    print('Connecting to Scraping Browser...')
    browser = await pw.chromium.connect_over_cdp(SBR_WS_CDP)
    page = await browser.new_page()
    print('Connected! Navigating to https://math-ege.sdamgia.ru/newapi/general...')
    await page.goto('https://math-ege.sdamgia.ru/newapi/general')
    # CAPTCHA handling: If you're expecting a CAPTCHA on the target page, use the following code snippet to check the status of Scraping Browser's automatic CAPTCHA solver
    client = await page.context.new_cdp_session(page)
    print('Waiting captcha to solve...')
    solve_res = await client.send('Captcha.waitForSolve', {
        'detectTimeout': 1500,
    })
    print('Captcha solve status:', solve_res['status'])
    print('Navigated! Scraping page content...')
    a_handle = await page.evaluate_handle("document.body")
    result_handle = await page.evaluate_handle("body => body.innerText", a_handle)
    stringData = await result_handle.json_value()
    await result_handle.dispose()
    await browser.close()
    GENERAL_DATA = json.loads(stringData)

async def main():
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())


@bot.message_handler(commands=['start'])
def main(message):
    user_name = message.from_user.first_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å"
    welcome_text = f"""
    üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üåü

–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –ï–ì–≠! –Ø - –≤–∞—à –≤–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫, –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏ –æ—Å–≤–æ–µ–Ω–∏–∏ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º.

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –≤–∑–ª–µ—Ç–µ—Ç—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∑–Ω–∞–Ω–∏–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–≤–æ–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç, –∏ –¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç —Å–≤–æ–µ–º—É —É—á–µ–±–Ω–æ–º—É –ø–æ–ª–µ—Ç—É –∫ —É—Å–ø–µ—Ö—É.

üéì –ù–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–º—É —Å–æ–≤–ª–∞–¥–µ–Ω–∏—é —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ï–ì–≠. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —ç—Ç–æ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–º–µ—Å—Ç–µ!

üî• –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? –¢–æ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å" –∏ –¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –≤–æ–ª—à–µ–±—Å—Ç–≤—É! üöÄ

    """
    layout = types.InlineKeyboardMarkup(
        [
            [
                types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='themes'),
            ],
        ]
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=layout, parse_mode='html')

def create_layout():
    global GENERAL_DATA
    iterableData = sorted(GENERAL_DATA['constructor'], key=lambda k: k['title'])
    filteredData = list(filter(lambda item: type(item.get("subtopics")) is list, iterableData))
    layout = types.InlineKeyboardMarkup()
    for item in filteredData:
        layout.add(types.InlineKeyboardButton(item['title']+ ' ' + '(' +str(item['amount'])+ ')', callback_data=item['issue']))
    return layout

@bot.callback_query_handler(func=lambda callback: True)
def callback_handler(callback):
    if  callback.data == 'themes':
        bot.send_message(callback.message.chat.id, '<b>–¢–µ–º—ã</b>', reply_markup=create_layout(), parse_mode='html')
    else:
        bot.send_message(callback.message.chat.id, '<b>–†–∞–∑–¥–µ–ª—ã</b>', reply_markup=create_subtopics_layout(callback.data), parse_mode='html')
        
def get_subtopics(issue):
    global GENERAL_DATA
    iterableData = GENERAL_DATA['constructor']
    element = list(filter(lambda item: item.get("issue") == issue, iterableData))
    return sorted(element[0]['subtopics'], key=lambda k: k['title'])

def create_subtopics_layout(issue):
    subtopics = get_subtopics(issue)
    layout = types.InlineKeyboardMarkup()
    for sub in subtopics:
        layout.add(types.InlineKeyboardButton(sub['title']+ ' ' + '(' +str(sub['amount'])+ ')', url='https://math-ege.sdamgia.ru/test?theme=' + str(sub['id'])))
    return layout


bot.polling(none_stop=True)